// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AffiliatePointsUpdated extends ethereum.Event {
  get params(): AffiliatePointsUpdated__Params {
    return new AffiliatePointsUpdated__Params(this);
  }
}

export class AffiliatePointsUpdated__Params {
  _event: AffiliatePointsUpdated;

  constructor(event: AffiliatePointsUpdated) {
    this._event = event;
  }

  get nftID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get affiliatePoints(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AffiliateRewardsClaimed extends ethereum.Event {
  get params(): AffiliateRewardsClaimed__Params {
    return new AffiliateRewardsClaimed__Params(this);
  }
}

export class AffiliateRewardsClaimed__Params {
  _event: AffiliateRewardsClaimed;

  constructor(event: AffiliateRewardsClaimed) {
    this._event = event;
  }

  get nftID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get reward(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LoyaltyPointsUpdated extends ethereum.Event {
  get params(): LoyaltyPointsUpdated__Params {
    return new LoyaltyPointsUpdated__Params(this);
  }
}

export class LoyaltyPointsUpdated__Params {
  _event: LoyaltyPointsUpdated;

  constructor(event: LoyaltyPointsUpdated) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get loyaltyPoints(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LoyaltyRewardDistributed extends ethereum.Event {
  get params(): LoyaltyRewardDistributed__Params {
    return new LoyaltyRewardDistributed__Params(this);
  }
}

export class LoyaltyRewardDistributed__Params {
  _event: LoyaltyRewardDistributed;

  constructor(event: LoyaltyRewardDistributed) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reward(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RedeemedPSM extends ethereum.Event {
  get params(): RedeemedPSM__Params {
    return new RedeemedPSM__Params(this);
  }
}

export class RedeemedPSM__Params {
  _event: RedeemedPSM;

  constructor(event: RedeemedPSM) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountPSM(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get reward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TopCutVault extends ethereum.SmartContract {
  static bind(address: Address): TopCutVault {
    return new TopCutVault("TopCutVault", address);
  }

  AFFILIATE_NFT(): Address {
    let result = super.call("AFFILIATE_NFT", "AFFILIATE_NFT():(address)", []);

    return result[0].toAddress();
  }

  try_AFFILIATE_NFT(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "AFFILIATE_NFT",
      "AFFILIATE_NFT():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  EXTRACTION_FEE_ETH(): BigInt {
    let result = super.call(
      "EXTRACTION_FEE_ETH",
      "EXTRACTION_FEE_ETH():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_EXTRACTION_FEE_ETH(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "EXTRACTION_FEE_ETH",
      "EXTRACTION_FEE_ETH():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  affiliatePoints(nftID: BigInt): BigInt {
    let result = super.call(
      "affiliatePoints",
      "affiliatePoints(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(nftID)],
    );

    return result[0].toBigInt();
  }

  try_affiliatePoints(nftID: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "affiliatePoints",
      "affiliatePoints(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(nftID)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  leadingPoints(): BigInt {
    let result = super.call("leadingPoints", "leadingPoints():(uint256)", []);

    return result[0].toBigInt();
  }

  try_leadingPoints(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "leadingPoints",
      "leadingPoints():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loyaltyPoints(trader: Address): BigInt {
    let result = super.call(
      "loyaltyPoints",
      "loyaltyPoints(address):(uint256)",
      [ethereum.Value.fromAddress(trader)],
    );

    return result[0].toBigInt();
  }

  try_loyaltyPoints(trader: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "loyaltyPoints",
      "loyaltyPoints(address):(uint256)",
      [ethereum.Value.fromAddress(trader)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loyaltyPointsLeader(): Address {
    let result = super.call(
      "loyaltyPointsLeader",
      "loyaltyPointsLeader():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_loyaltyPointsLeader(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "loyaltyPointsLeader",
      "loyaltyPointsLeader():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nextDistributionTime(): BigInt {
    let result = super.call(
      "nextDistributionTime",
      "nextDistributionTime():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_nextDistributionTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextDistributionTime",
      "nextDistributionTime():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quoteAffiliateReward(_pointsRedeemed: BigInt): BigInt {
    let result = super.call(
      "quoteAffiliateReward",
      "quoteAffiliateReward(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_pointsRedeemed)],
    );

    return result[0].toBigInt();
  }

  try_quoteAffiliateReward(
    _pointsRedeemed: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "quoteAffiliateReward",
      "quoteAffiliateReward(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_pointsRedeemed)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quoteRedeemPSM(_amountPSM: BigInt): BigInt {
    let result = super.call(
      "quoteRedeemPSM",
      "quoteRedeemPSM(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amountPSM)],
    );

    return result[0].toBigInt();
  }

  try_quoteRedeemPSM(_amountPSM: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "quoteRedeemPSM",
      "quoteRedeemPSM(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amountPSM)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _salt(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _firstDistributionTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class ClaimAffiliateRewardCall extends ethereum.Call {
  get inputs(): ClaimAffiliateRewardCall__Inputs {
    return new ClaimAffiliateRewardCall__Inputs(this);
  }

  get outputs(): ClaimAffiliateRewardCall__Outputs {
    return new ClaimAffiliateRewardCall__Outputs(this);
  }
}

export class ClaimAffiliateRewardCall__Inputs {
  _call: ClaimAffiliateRewardCall;

  constructor(call: ClaimAffiliateRewardCall) {
    this._call = call;
  }

  get _refID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _pointsRedeemed(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minReceived(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ClaimAffiliateRewardCall__Outputs {
  _call: ClaimAffiliateRewardCall;

  constructor(call: ClaimAffiliateRewardCall) {
    this._call = call;
  }
}

export class ExtractTokenBalanceCall extends ethereum.Call {
  get inputs(): ExtractTokenBalanceCall__Inputs {
    return new ExtractTokenBalanceCall__Inputs(this);
  }

  get outputs(): ExtractTokenBalanceCall__Outputs {
    return new ExtractTokenBalanceCall__Outputs(this);
  }
}

export class ExtractTokenBalanceCall__Inputs {
  _call: ExtractTokenBalanceCall;

  constructor(call: ExtractTokenBalanceCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _minReceived(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ExtractTokenBalanceCall__Outputs {
  _call: ExtractTokenBalanceCall;

  constructor(call: ExtractTokenBalanceCall) {
    this._call = call;
  }
}

export class RedeemPSMCall extends ethereum.Call {
  get inputs(): RedeemPSMCall__Inputs {
    return new RedeemPSMCall__Inputs(this);
  }

  get outputs(): RedeemPSMCall__Outputs {
    return new RedeemPSMCall__Outputs(this);
  }
}

export class RedeemPSMCall__Inputs {
  _call: RedeemPSMCall;

  constructor(call: RedeemPSMCall) {
    this._call = call;
  }

  get _amountPSM(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minReceived(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RedeemPSMCall__Outputs {
  _call: RedeemPSMCall;

  constructor(call: RedeemPSMCall) {
    this._call = call;
  }
}

export class UpdatePointsCall extends ethereum.Call {
  get inputs(): UpdatePointsCall__Inputs {
    return new UpdatePointsCall__Inputs(this);
  }

  get outputs(): UpdatePointsCall__Outputs {
    return new UpdatePointsCall__Outputs(this);
  }
}

export class UpdatePointsCall__Inputs {
  _call: UpdatePointsCall;

  constructor(call: UpdatePointsCall) {
    this._call = call;
  }

  get _trader(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _refID(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdatePointsCall__Outputs {
  _call: UpdatePointsCall;

  constructor(call: UpdatePointsCall) {
    this._call = call;
  }
}
